Terminals unused in grammar

   COMMENT
   L_BRACKET
   R_BRACKET


State 38 conflicts: 1 reduce/reduce
State 54 conflicts: 1 reduce/reduce
State 72 conflicts: 1 reduce/reduce
State 82 conflicts: 1 reduce/reduce
State 84 conflicts: 1 reduce/reduce


Grammar

    0 $accept: prog_start $end

    1 prog_start: %empty
    2           | functions

    3 functions: function
    4          | function functions

    5 function: FUNC ID L_PAREN args R_PAREN L_C_BRACKET statements R_C_BRACKET SEMICOLON

    6 args: declaration COMMA args
    7     | declaration
    8     | %empty

    9 statements: statement SEMICOLON
   10           | statement SEMICOLON statements
   11           | %empty

   12 statement: declaration
   13          | function_call
   14          | num
   15          | if
   16          | while
   17          | for
   18          | input
   19          | output
   20          | return
   21          | ID ASSIGN exp
   22          | ID ASSIGN function_call

   23 return: RETURN ID
   24       | RETURN exp

   25 num: NUM ID ASSIGN exp
   26    | NUM ID ASSIGN NUMBER
   27    | NUM ID ASSIGN function_call

   28 if: IF bool_exp L_C_BRACKET statements R_C_BRACKET elsify

   29 elsify: elif elsify
   30       | else
   31       | %empty

   32 elif: ELIF bool_exp L_C_BRACKET statements R_C_BRACKET

   33 else: ELSE L_C_BRACKET statements R_C_BRACKET

   34 while: WHILE bool_exp L_C_BRACKET statements R_C_BRACKET

   35 for: FOR num SEMICOLON bool_exp ID ASSIGN exp L_C_BRACKET statements R_C_BRACKET

   36 input: INPUT L_PAREN ID R_PAREN

   37 output: OUTPUT L_PAREN exp R_PAREN

   38 exp: exp PLUS term
   39    | exp MINUS term
   40    | term

   41 bool_exp: L_PAREN exp GREATER exp R_PAREN
   42         | L_PAREN exp LESS exp R_PAREN
   43         | L_PAREN exp EQUAL exp R_PAREN
   44         | L_PAREN exp LE_EQ exp R_PAREN
   45         | L_PAREN exp GE_EQ exp R_PAREN
   46         | L_PAREN exp NOT_EQUAL exp R_PAREN
   47         | L_PAREN exp R_PAREN

   48 term: term MULTI factor
   49     | term DIVISION factor
   50     | factor

   51 factor: L_PAREN exp R_PAREN
   52       | NUMBER
   53       | ID
   54       | function_call

   55 declaration: NUM ID

   56 parameters: exp
   57           | exp COMMA parameters
   58           | %empty

   59 function_call: ID L_PAREN parameters R_PAREN


Terminals, with rules where they appear

$end (0) 0
error (256)
RETURN (258) 23 24
INPUT (259) 36
OUTPUT (260) 37
NUMBER (261) 26 52
NUM (262) 25 26 27 55
WHILE (263) 34
IF (264) 28
ELIF (265) 32
ELSE (266) 33
FUNC (267) 5
PLUS (268) 38
MINUS (269) 39
MULTI (270) 48
DIVISION (271) 49
LESS (272) 42
GREATER (273) 41
EQUAL (274) 43
NOT_EQUAL (275) 46
LE_EQ (276) 44
GE_EQ (277) 45
COMMENT (278)
L_BRACKET (279)
R_BRACKET (280)
L_C_BRACKET (281) 5 28 32 33 34 35
R_C_BRACKET (282) 5 28 32 33 34 35
L_PAREN (283) 5 36 37 41 42 43 44 45 46 47 51 59
R_PAREN (284) 5 36 37 41 42 43 44 45 46 47 51 59
ASSIGN (285) 21 22 25 26 27 35
SEMICOLON (286) 5 9 10 35
COMMA (287) 6 57
FOR (288) 35
ID (289) 5 21 22 23 25 26 27 35 36 53 55 59


Nonterminals, with rules where they appear

$accept (35)
    on left: 0
prog_start (36)
    on left: 1 2, on right: 0
functions (37)
    on left: 3 4, on right: 2 4
function (38)
    on left: 5, on right: 3 4
args (39)
    on left: 6 7 8, on right: 5 6
statements (40)
    on left: 9 10 11, on right: 5 10 28 32 33 34 35
statement (41)
    on left: 12 13 14 15 16 17 18 19 20 21 22, on right: 9 10
return (42)
    on left: 23 24, on right: 20
num (43)
    on left: 25 26 27, on right: 14 35
if (44)
    on left: 28, on right: 15
elsify (45)
    on left: 29 30 31, on right: 28 29
elif (46)
    on left: 32, on right: 29
else (47)
    on left: 33, on right: 30
while (48)
    on left: 34, on right: 16
for (49)
    on left: 35, on right: 17
input (50)
    on left: 36, on right: 18
output (51)
    on left: 37, on right: 19
exp (52)
    on left: 38 39 40, on right: 21 24 25 35 37 38 39 41 42 43 44 45
    46 47 51 56 57
bool_exp (53)
    on left: 41 42 43 44 45 46 47, on right: 28 32 34 35
term (54)
    on left: 48 49 50, on right: 38 39 40 48 49
factor (55)
    on left: 51 52 53 54, on right: 48 49 50
declaration (56)
    on left: 55, on right: 6 7 12
parameters (57)
    on left: 56 57 58, on right: 57 59
function_call (58)
    on left: 59, on right: 13 22 27 54


State 0

    0 $accept: . prog_start $end

    FUNC  shift, and go to state 1

    $default  reduce using rule 1 (prog_start)

    prog_start  go to state 2
    functions   go to state 3
    function    go to state 4


State 1

    5 function: FUNC . ID L_PAREN args R_PAREN L_C_BRACKET statements R_C_BRACKET SEMICOLON

    ID  shift, and go to state 5


State 2

    0 $accept: prog_start . $end

    $end  shift, and go to state 6


State 3

    2 prog_start: functions .

    $default  reduce using rule 2 (prog_start)


State 4

    3 functions: function .
    4          | function . functions

    FUNC  shift, and go to state 1

    $default  reduce using rule 3 (functions)

    functions  go to state 7
    function   go to state 4


State 5

    5 function: FUNC ID . L_PAREN args R_PAREN L_C_BRACKET statements R_C_BRACKET SEMICOLON

    L_PAREN  shift, and go to state 8


State 6

    0 $accept: prog_start $end .

    $default  accept


State 7

    4 functions: function functions .

    $default  reduce using rule 4 (functions)


State 8

    5 function: FUNC ID L_PAREN . args R_PAREN L_C_BRACKET statements R_C_BRACKET SEMICOLON

    NUM  shift, and go to state 9

    $default  reduce using rule 8 (args)

    args         go to state 10
    declaration  go to state 11


State 9

   55 declaration: NUM . ID

    ID  shift, and go to state 12


State 10

    5 function: FUNC ID L_PAREN args . R_PAREN L_C_BRACKET statements R_C_BRACKET SEMICOLON

    R_PAREN  shift, and go to state 13


State 11

    6 args: declaration . COMMA args
    7     | declaration .

    COMMA  shift, and go to state 14

    $default  reduce using rule 7 (args)


State 12

   55 declaration: NUM ID .

    $default  reduce using rule 55 (declaration)


State 13

    5 function: FUNC ID L_PAREN args R_PAREN . L_C_BRACKET statements R_C_BRACKET SEMICOLON

    L_C_BRACKET  shift, and go to state 15


State 14

    6 args: declaration COMMA . args

    NUM  shift, and go to state 9

    $default  reduce using rule 8 (args)

    args         go to state 16
    declaration  go to state 11


State 15

    5 function: FUNC ID L_PAREN args R_PAREN L_C_BRACKET . statements R_C_BRACKET SEMICOLON

    RETURN  shift, and go to state 17
    INPUT   shift, and go to state 18
    OUTPUT  shift, and go to state 19
    NUM     shift, and go to state 20
    WHILE   shift, and go to state 21
    IF      shift, and go to state 22
    FOR     shift, and go to state 23
    ID      shift, and go to state 24

    $default  reduce using rule 11 (statements)

    statements     go to state 25
    statement      go to state 26
    return         go to state 27
    num            go to state 28
    if             go to state 29
    while          go to state 30
    for            go to state 31
    input          go to state 32
    output         go to state 33
    declaration    go to state 34
    function_call  go to state 35


State 16

    6 args: declaration COMMA args .

    $default  reduce using rule 6 (args)


State 17

   23 return: RETURN . ID
   24       | RETURN . exp

    NUMBER   shift, and go to state 36
    L_PAREN  shift, and go to state 37
    ID       shift, and go to state 38

    exp            go to state 39
    term           go to state 40
    factor         go to state 41
    function_call  go to state 42


State 18

   36 input: INPUT . L_PAREN ID R_PAREN

    L_PAREN  shift, and go to state 43


State 19

   37 output: OUTPUT . L_PAREN exp R_PAREN

    L_PAREN  shift, and go to state 44


State 20

   25 num: NUM . ID ASSIGN exp
   26    | NUM . ID ASSIGN NUMBER
   27    | NUM . ID ASSIGN function_call
   55 declaration: NUM . ID

    ID  shift, and go to state 45


State 21

   34 while: WHILE . bool_exp L_C_BRACKET statements R_C_BRACKET

    L_PAREN  shift, and go to state 46

    bool_exp  go to state 47


State 22

   28 if: IF . bool_exp L_C_BRACKET statements R_C_BRACKET elsify

    L_PAREN  shift, and go to state 46

    bool_exp  go to state 48


State 23

   35 for: FOR . num SEMICOLON bool_exp ID ASSIGN exp L_C_BRACKET statements R_C_BRACKET

    NUM  shift, and go to state 49

    num  go to state 50


State 24

   21 statement: ID . ASSIGN exp
   22          | ID . ASSIGN function_call
   59 function_call: ID . L_PAREN parameters R_PAREN

    L_PAREN  shift, and go to state 51
    ASSIGN   shift, and go to state 52


State 25

    5 function: FUNC ID L_PAREN args R_PAREN L_C_BRACKET statements . R_C_BRACKET SEMICOLON

    R_C_BRACKET  shift, and go to state 53


State 26

    9 statements: statement . SEMICOLON
   10           | statement . SEMICOLON statements

    SEMICOLON  shift, and go to state 54


State 27

   20 statement: return .

    $default  reduce using rule 20 (statement)


State 28

   14 statement: num .

    $default  reduce using rule 14 (statement)


State 29

   15 statement: if .

    $default  reduce using rule 15 (statement)


State 30

   16 statement: while .

    $default  reduce using rule 16 (statement)


State 31

   17 statement: for .

    $default  reduce using rule 17 (statement)


State 32

   18 statement: input .

    $default  reduce using rule 18 (statement)


State 33

   19 statement: output .

    $default  reduce using rule 19 (statement)


State 34

   12 statement: declaration .

    $default  reduce using rule 12 (statement)


State 35

   13 statement: function_call .

    $default  reduce using rule 13 (statement)


State 36

   52 factor: NUMBER .

    $default  reduce using rule 52 (factor)


State 37

   51 factor: L_PAREN . exp R_PAREN

    NUMBER   shift, and go to state 36
    L_PAREN  shift, and go to state 37
    ID       shift, and go to state 55

    exp            go to state 56
    term           go to state 40
    factor         go to state 41
    function_call  go to state 42


State 38

   23 return: RETURN ID .
   53 factor: ID .
   59 function_call: ID . L_PAREN parameters R_PAREN

    L_PAREN  shift, and go to state 51

    SEMICOLON  reduce using rule 23 (return)
    SEMICOLON  [reduce using rule 53 (factor)]
    $default   reduce using rule 53 (factor)


State 39

   24 return: RETURN exp .
   38 exp: exp . PLUS term
   39    | exp . MINUS term

    PLUS   shift, and go to state 57
    MINUS  shift, and go to state 58

    $default  reduce using rule 24 (return)


State 40

   40 exp: term .
   48 term: term . MULTI factor
   49     | term . DIVISION factor

    MULTI     shift, and go to state 59
    DIVISION  shift, and go to state 60

    $default  reduce using rule 40 (exp)


State 41

   50 term: factor .

    $default  reduce using rule 50 (term)


State 42

   54 factor: function_call .

    $default  reduce using rule 54 (factor)


State 43

   36 input: INPUT L_PAREN . ID R_PAREN

    ID  shift, and go to state 61


State 44

   37 output: OUTPUT L_PAREN . exp R_PAREN

    NUMBER   shift, and go to state 36
    L_PAREN  shift, and go to state 37
    ID       shift, and go to state 55

    exp            go to state 62
    term           go to state 40
    factor         go to state 41
    function_call  go to state 42


State 45

   25 num: NUM ID . ASSIGN exp
   26    | NUM ID . ASSIGN NUMBER
   27    | NUM ID . ASSIGN function_call
   55 declaration: NUM ID .

    ASSIGN  shift, and go to state 63

    $default  reduce using rule 55 (declaration)


State 46

   41 bool_exp: L_PAREN . exp GREATER exp R_PAREN
   42         | L_PAREN . exp LESS exp R_PAREN
   43         | L_PAREN . exp EQUAL exp R_PAREN
   44         | L_PAREN . exp LE_EQ exp R_PAREN
   45         | L_PAREN . exp GE_EQ exp R_PAREN
   46         | L_PAREN . exp NOT_EQUAL exp R_PAREN
   47         | L_PAREN . exp R_PAREN

    NUMBER   shift, and go to state 36
    L_PAREN  shift, and go to state 37
    ID       shift, and go to state 55

    exp            go to state 64
    term           go to state 40
    factor         go to state 41
    function_call  go to state 42


State 47

   34 while: WHILE bool_exp . L_C_BRACKET statements R_C_BRACKET

    L_C_BRACKET  shift, and go to state 65


State 48

   28 if: IF bool_exp . L_C_BRACKET statements R_C_BRACKET elsify

    L_C_BRACKET  shift, and go to state 66


State 49

   25 num: NUM . ID ASSIGN exp
   26    | NUM . ID ASSIGN NUMBER
   27    | NUM . ID ASSIGN function_call

    ID  shift, and go to state 67


State 50

   35 for: FOR num . SEMICOLON bool_exp ID ASSIGN exp L_C_BRACKET statements R_C_BRACKET

    SEMICOLON  shift, and go to state 68


State 51

   59 function_call: ID L_PAREN . parameters R_PAREN

    NUMBER   shift, and go to state 36
    L_PAREN  shift, and go to state 37
    ID       shift, and go to state 55

    $default  reduce using rule 58 (parameters)

    exp            go to state 69
    term           go to state 40
    factor         go to state 41
    parameters     go to state 70
    function_call  go to state 42


State 52

   21 statement: ID ASSIGN . exp
   22          | ID ASSIGN . function_call

    NUMBER   shift, and go to state 36
    L_PAREN  shift, and go to state 37
    ID       shift, and go to state 55

    exp            go to state 71
    term           go to state 40
    factor         go to state 41
    function_call  go to state 72


State 53

    5 function: FUNC ID L_PAREN args R_PAREN L_C_BRACKET statements R_C_BRACKET . SEMICOLON

    SEMICOLON  shift, and go to state 73


State 54

    9 statements: statement SEMICOLON .
   10           | statement SEMICOLON . statements

    RETURN  shift, and go to state 17
    INPUT   shift, and go to state 18
    OUTPUT  shift, and go to state 19
    NUM     shift, and go to state 20
    WHILE   shift, and go to state 21
    IF      shift, and go to state 22
    FOR     shift, and go to state 23
    ID      shift, and go to state 24

    R_C_BRACKET  reduce using rule 9 (statements)
    R_C_BRACKET  [reduce using rule 11 (statements)]
    $default     reduce using rule 9 (statements)

    statements     go to state 74
    statement      go to state 26
    return         go to state 27
    num            go to state 28
    if             go to state 29
    while          go to state 30
    for            go to state 31
    input          go to state 32
    output         go to state 33
    declaration    go to state 34
    function_call  go to state 35


State 55

   53 factor: ID .
   59 function_call: ID . L_PAREN parameters R_PAREN

    L_PAREN  shift, and go to state 51

    $default  reduce using rule 53 (factor)


State 56

   38 exp: exp . PLUS term
   39    | exp . MINUS term
   51 factor: L_PAREN exp . R_PAREN

    PLUS     shift, and go to state 57
    MINUS    shift, and go to state 58
    R_PAREN  shift, and go to state 75


State 57

   38 exp: exp PLUS . term

    NUMBER   shift, and go to state 36
    L_PAREN  shift, and go to state 37
    ID       shift, and go to state 55

    term           go to state 76
    factor         go to state 41
    function_call  go to state 42


State 58

   39 exp: exp MINUS . term

    NUMBER   shift, and go to state 36
    L_PAREN  shift, and go to state 37
    ID       shift, and go to state 55

    term           go to state 77
    factor         go to state 41
    function_call  go to state 42


State 59

   48 term: term MULTI . factor

    NUMBER   shift, and go to state 36
    L_PAREN  shift, and go to state 37
    ID       shift, and go to state 55

    factor         go to state 78
    function_call  go to state 42


State 60

   49 term: term DIVISION . factor

    NUMBER   shift, and go to state 36
    L_PAREN  shift, and go to state 37
    ID       shift, and go to state 55

    factor         go to state 79
    function_call  go to state 42


State 61

   36 input: INPUT L_PAREN ID . R_PAREN

    R_PAREN  shift, and go to state 80


State 62

   37 output: OUTPUT L_PAREN exp . R_PAREN
   38 exp: exp . PLUS term
   39    | exp . MINUS term

    PLUS     shift, and go to state 57
    MINUS    shift, and go to state 58
    R_PAREN  shift, and go to state 81


State 63

   25 num: NUM ID ASSIGN . exp
   26    | NUM ID ASSIGN . NUMBER
   27    | NUM ID ASSIGN . function_call

    NUMBER   shift, and go to state 82
    L_PAREN  shift, and go to state 37
    ID       shift, and go to state 55

    exp            go to state 83
    term           go to state 40
    factor         go to state 41
    function_call  go to state 84


State 64

   38 exp: exp . PLUS term
   39    | exp . MINUS term
   41 bool_exp: L_PAREN exp . GREATER exp R_PAREN
   42         | L_PAREN exp . LESS exp R_PAREN
   43         | L_PAREN exp . EQUAL exp R_PAREN
   44         | L_PAREN exp . LE_EQ exp R_PAREN
   45         | L_PAREN exp . GE_EQ exp R_PAREN
   46         | L_PAREN exp . NOT_EQUAL exp R_PAREN
   47         | L_PAREN exp . R_PAREN

    PLUS       shift, and go to state 57
    MINUS      shift, and go to state 58
    LESS       shift, and go to state 85
    GREATER    shift, and go to state 86
    EQUAL      shift, and go to state 87
    NOT_EQUAL  shift, and go to state 88
    LE_EQ      shift, and go to state 89
    GE_EQ      shift, and go to state 90
    R_PAREN    shift, and go to state 91


State 65

   34 while: WHILE bool_exp L_C_BRACKET . statements R_C_BRACKET

    RETURN  shift, and go to state 17
    INPUT   shift, and go to state 18
    OUTPUT  shift, and go to state 19
    NUM     shift, and go to state 20
    WHILE   shift, and go to state 21
    IF      shift, and go to state 22
    FOR     shift, and go to state 23
    ID      shift, and go to state 24

    $default  reduce using rule 11 (statements)

    statements     go to state 92
    statement      go to state 26
    return         go to state 27
    num            go to state 28
    if             go to state 29
    while          go to state 30
    for            go to state 31
    input          go to state 32
    output         go to state 33
    declaration    go to state 34
    function_call  go to state 35


State 66

   28 if: IF bool_exp L_C_BRACKET . statements R_C_BRACKET elsify

    RETURN  shift, and go to state 17
    INPUT   shift, and go to state 18
    OUTPUT  shift, and go to state 19
    NUM     shift, and go to state 20
    WHILE   shift, and go to state 21
    IF      shift, and go to state 22
    FOR     shift, and go to state 23
    ID      shift, and go to state 24

    $default  reduce using rule 11 (statements)

    statements     go to state 93
    statement      go to state 26
    return         go to state 27
    num            go to state 28
    if             go to state 29
    while          go to state 30
    for            go to state 31
    input          go to state 32
    output         go to state 33
    declaration    go to state 34
    function_call  go to state 35


State 67

   25 num: NUM ID . ASSIGN exp
   26    | NUM ID . ASSIGN NUMBER
   27    | NUM ID . ASSIGN function_call

    ASSIGN  shift, and go to state 63


State 68

   35 for: FOR num SEMICOLON . bool_exp ID ASSIGN exp L_C_BRACKET statements R_C_BRACKET

    L_PAREN  shift, and go to state 46

    bool_exp  go to state 94


State 69

   38 exp: exp . PLUS term
   39    | exp . MINUS term
   56 parameters: exp .
   57           | exp . COMMA parameters

    PLUS   shift, and go to state 57
    MINUS  shift, and go to state 58
    COMMA  shift, and go to state 95

    $default  reduce using rule 56 (parameters)


State 70

   59 function_call: ID L_PAREN parameters . R_PAREN

    R_PAREN  shift, and go to state 96


State 71

   21 statement: ID ASSIGN exp .
   38 exp: exp . PLUS term
   39    | exp . MINUS term

    PLUS   shift, and go to state 57
    MINUS  shift, and go to state 58

    $default  reduce using rule 21 (statement)


State 72

   22 statement: ID ASSIGN function_call .
   54 factor: function_call .

    SEMICOLON  reduce using rule 22 (statement)
    SEMICOLON  [reduce using rule 54 (factor)]
    $default   reduce using rule 54 (factor)


State 73

    5 function: FUNC ID L_PAREN args R_PAREN L_C_BRACKET statements R_C_BRACKET SEMICOLON .

    $default  reduce using rule 5 (function)


State 74

   10 statements: statement SEMICOLON statements .

    $default  reduce using rule 10 (statements)


State 75

   51 factor: L_PAREN exp R_PAREN .

    $default  reduce using rule 51 (factor)


State 76

   38 exp: exp PLUS term .
   48 term: term . MULTI factor
   49     | term . DIVISION factor

    MULTI     shift, and go to state 59
    DIVISION  shift, and go to state 60

    $default  reduce using rule 38 (exp)


State 77

   39 exp: exp MINUS term .
   48 term: term . MULTI factor
   49     | term . DIVISION factor

    MULTI     shift, and go to state 59
    DIVISION  shift, and go to state 60

    $default  reduce using rule 39 (exp)


State 78

   48 term: term MULTI factor .

    $default  reduce using rule 48 (term)


State 79

   49 term: term DIVISION factor .

    $default  reduce using rule 49 (term)


State 80

   36 input: INPUT L_PAREN ID R_PAREN .

    $default  reduce using rule 36 (input)


State 81

   37 output: OUTPUT L_PAREN exp R_PAREN .

    $default  reduce using rule 37 (output)


State 82

   26 num: NUM ID ASSIGN NUMBER .
   52 factor: NUMBER .

    SEMICOLON  reduce using rule 26 (num)
    SEMICOLON  [reduce using rule 52 (factor)]
    $default   reduce using rule 52 (factor)


State 83

   25 num: NUM ID ASSIGN exp .
   38 exp: exp . PLUS term
   39    | exp . MINUS term

    PLUS   shift, and go to state 57
    MINUS  shift, and go to state 58

    $default  reduce using rule 25 (num)


State 84

   27 num: NUM ID ASSIGN function_call .
   54 factor: function_call .

    SEMICOLON  reduce using rule 27 (num)
    SEMICOLON  [reduce using rule 54 (factor)]
    $default   reduce using rule 54 (factor)


State 85

   42 bool_exp: L_PAREN exp LESS . exp R_PAREN

    NUMBER   shift, and go to state 36
    L_PAREN  shift, and go to state 37
    ID       shift, and go to state 55

    exp            go to state 97
    term           go to state 40
    factor         go to state 41
    function_call  go to state 42


State 86

   41 bool_exp: L_PAREN exp GREATER . exp R_PAREN

    NUMBER   shift, and go to state 36
    L_PAREN  shift, and go to state 37
    ID       shift, and go to state 55

    exp            go to state 98
    term           go to state 40
    factor         go to state 41
    function_call  go to state 42


State 87

   43 bool_exp: L_PAREN exp EQUAL . exp R_PAREN

    NUMBER   shift, and go to state 36
    L_PAREN  shift, and go to state 37
    ID       shift, and go to state 55

    exp            go to state 99
    term           go to state 40
    factor         go to state 41
    function_call  go to state 42


State 88

   46 bool_exp: L_PAREN exp NOT_EQUAL . exp R_PAREN

    NUMBER   shift, and go to state 36
    L_PAREN  shift, and go to state 37
    ID       shift, and go to state 55

    exp            go to state 100
    term           go to state 40
    factor         go to state 41
    function_call  go to state 42


State 89

   44 bool_exp: L_PAREN exp LE_EQ . exp R_PAREN

    NUMBER   shift, and go to state 36
    L_PAREN  shift, and go to state 37
    ID       shift, and go to state 55

    exp            go to state 101
    term           go to state 40
    factor         go to state 41
    function_call  go to state 42


State 90

   45 bool_exp: L_PAREN exp GE_EQ . exp R_PAREN

    NUMBER   shift, and go to state 36
    L_PAREN  shift, and go to state 37
    ID       shift, and go to state 55

    exp            go to state 102
    term           go to state 40
    factor         go to state 41
    function_call  go to state 42


State 91

   47 bool_exp: L_PAREN exp R_PAREN .

    $default  reduce using rule 47 (bool_exp)


State 92

   34 while: WHILE bool_exp L_C_BRACKET statements . R_C_BRACKET

    R_C_BRACKET  shift, and go to state 103


State 93

   28 if: IF bool_exp L_C_BRACKET statements . R_C_BRACKET elsify

    R_C_BRACKET  shift, and go to state 104


State 94

   35 for: FOR num SEMICOLON bool_exp . ID ASSIGN exp L_C_BRACKET statements R_C_BRACKET

    ID  shift, and go to state 105


State 95

   57 parameters: exp COMMA . parameters

    NUMBER   shift, and go to state 36
    L_PAREN  shift, and go to state 37
    ID       shift, and go to state 55

    $default  reduce using rule 58 (parameters)

    exp            go to state 69
    term           go to state 40
    factor         go to state 41
    parameters     go to state 106
    function_call  go to state 42


State 96

   59 function_call: ID L_PAREN parameters R_PAREN .

    $default  reduce using rule 59 (function_call)


State 97

   38 exp: exp . PLUS term
   39    | exp . MINUS term
   42 bool_exp: L_PAREN exp LESS exp . R_PAREN

    PLUS     shift, and go to state 57
    MINUS    shift, and go to state 58
    R_PAREN  shift, and go to state 107


State 98

   38 exp: exp . PLUS term
   39    | exp . MINUS term
   41 bool_exp: L_PAREN exp GREATER exp . R_PAREN

    PLUS     shift, and go to state 57
    MINUS    shift, and go to state 58
    R_PAREN  shift, and go to state 108


State 99

   38 exp: exp . PLUS term
   39    | exp . MINUS term
   43 bool_exp: L_PAREN exp EQUAL exp . R_PAREN

    PLUS     shift, and go to state 57
    MINUS    shift, and go to state 58
    R_PAREN  shift, and go to state 109


State 100

   38 exp: exp . PLUS term
   39    | exp . MINUS term
   46 bool_exp: L_PAREN exp NOT_EQUAL exp . R_PAREN

    PLUS     shift, and go to state 57
    MINUS    shift, and go to state 58
    R_PAREN  shift, and go to state 110


State 101

   38 exp: exp . PLUS term
   39    | exp . MINUS term
   44 bool_exp: L_PAREN exp LE_EQ exp . R_PAREN

    PLUS     shift, and go to state 57
    MINUS    shift, and go to state 58
    R_PAREN  shift, and go to state 111


State 102

   38 exp: exp . PLUS term
   39    | exp . MINUS term
   45 bool_exp: L_PAREN exp GE_EQ exp . R_PAREN

    PLUS     shift, and go to state 57
    MINUS    shift, and go to state 58
    R_PAREN  shift, and go to state 112


State 103

   34 while: WHILE bool_exp L_C_BRACKET statements R_C_BRACKET .

    $default  reduce using rule 34 (while)


State 104

   28 if: IF bool_exp L_C_BRACKET statements R_C_BRACKET . elsify

    ELIF  shift, and go to state 113
    ELSE  shift, and go to state 114

    $default  reduce using rule 31 (elsify)

    elsify  go to state 115
    elif    go to state 116
    else    go to state 117


State 105

   35 for: FOR num SEMICOLON bool_exp ID . ASSIGN exp L_C_BRACKET statements R_C_BRACKET

    ASSIGN  shift, and go to state 118


State 106

   57 parameters: exp COMMA parameters .

    $default  reduce using rule 57 (parameters)


State 107

   42 bool_exp: L_PAREN exp LESS exp R_PAREN .

    $default  reduce using rule 42 (bool_exp)


State 108

   41 bool_exp: L_PAREN exp GREATER exp R_PAREN .

    $default  reduce using rule 41 (bool_exp)


State 109

   43 bool_exp: L_PAREN exp EQUAL exp R_PAREN .

    $default  reduce using rule 43 (bool_exp)


State 110

   46 bool_exp: L_PAREN exp NOT_EQUAL exp R_PAREN .

    $default  reduce using rule 46 (bool_exp)


State 111

   44 bool_exp: L_PAREN exp LE_EQ exp R_PAREN .

    $default  reduce using rule 44 (bool_exp)


State 112

   45 bool_exp: L_PAREN exp GE_EQ exp R_PAREN .

    $default  reduce using rule 45 (bool_exp)


State 113

   32 elif: ELIF . bool_exp L_C_BRACKET statements R_C_BRACKET

    L_PAREN  shift, and go to state 46

    bool_exp  go to state 119


State 114

   33 else: ELSE . L_C_BRACKET statements R_C_BRACKET

    L_C_BRACKET  shift, and go to state 120


State 115

   28 if: IF bool_exp L_C_BRACKET statements R_C_BRACKET elsify .

    $default  reduce using rule 28 (if)


State 116

   29 elsify: elif . elsify

    ELIF  shift, and go to state 113
    ELSE  shift, and go to state 114

    $default  reduce using rule 31 (elsify)

    elsify  go to state 121
    elif    go to state 116
    else    go to state 117


State 117

   30 elsify: else .

    $default  reduce using rule 30 (elsify)


State 118

   35 for: FOR num SEMICOLON bool_exp ID ASSIGN . exp L_C_BRACKET statements R_C_BRACKET

    NUMBER   shift, and go to state 36
    L_PAREN  shift, and go to state 37
    ID       shift, and go to state 55

    exp            go to state 122
    term           go to state 40
    factor         go to state 41
    function_call  go to state 42


State 119

   32 elif: ELIF bool_exp . L_C_BRACKET statements R_C_BRACKET

    L_C_BRACKET  shift, and go to state 123


State 120

   33 else: ELSE L_C_BRACKET . statements R_C_BRACKET

    RETURN  shift, and go to state 17
    INPUT   shift, and go to state 18
    OUTPUT  shift, and go to state 19
    NUM     shift, and go to state 20
    WHILE   shift, and go to state 21
    IF      shift, and go to state 22
    FOR     shift, and go to state 23
    ID      shift, and go to state 24

    $default  reduce using rule 11 (statements)

    statements     go to state 124
    statement      go to state 26
    return         go to state 27
    num            go to state 28
    if             go to state 29
    while          go to state 30
    for            go to state 31
    input          go to state 32
    output         go to state 33
    declaration    go to state 34
    function_call  go to state 35


State 121

   29 elsify: elif elsify .

    $default  reduce using rule 29 (elsify)


State 122

   35 for: FOR num SEMICOLON bool_exp ID ASSIGN exp . L_C_BRACKET statements R_C_BRACKET
   38 exp: exp . PLUS term
   39    | exp . MINUS term

    PLUS         shift, and go to state 57
    MINUS        shift, and go to state 58
    L_C_BRACKET  shift, and go to state 125


State 123

   32 elif: ELIF bool_exp L_C_BRACKET . statements R_C_BRACKET

    RETURN  shift, and go to state 17
    INPUT   shift, and go to state 18
    OUTPUT  shift, and go to state 19
    NUM     shift, and go to state 20
    WHILE   shift, and go to state 21
    IF      shift, and go to state 22
    FOR     shift, and go to state 23
    ID      shift, and go to state 24

    $default  reduce using rule 11 (statements)

    statements     go to state 126
    statement      go to state 26
    return         go to state 27
    num            go to state 28
    if             go to state 29
    while          go to state 30
    for            go to state 31
    input          go to state 32
    output         go to state 33
    declaration    go to state 34
    function_call  go to state 35


State 124

   33 else: ELSE L_C_BRACKET statements . R_C_BRACKET

    R_C_BRACKET  shift, and go to state 127


State 125

   35 for: FOR num SEMICOLON bool_exp ID ASSIGN exp L_C_BRACKET . statements R_C_BRACKET

    RETURN  shift, and go to state 17
    INPUT   shift, and go to state 18
    OUTPUT  shift, and go to state 19
    NUM     shift, and go to state 20
    WHILE   shift, and go to state 21
    IF      shift, and go to state 22
    FOR     shift, and go to state 23
    ID      shift, and go to state 24

    $default  reduce using rule 11 (statements)

    statements     go to state 128
    statement      go to state 26
    return         go to state 27
    num            go to state 28
    if             go to state 29
    while          go to state 30
    for            go to state 31
    input          go to state 32
    output         go to state 33
    declaration    go to state 34
    function_call  go to state 35


State 126

   32 elif: ELIF bool_exp L_C_BRACKET statements . R_C_BRACKET

    R_C_BRACKET  shift, and go to state 129


State 127

   33 else: ELSE L_C_BRACKET statements R_C_BRACKET .

    $default  reduce using rule 33 (else)


State 128

   35 for: FOR num SEMICOLON bool_exp ID ASSIGN exp L_C_BRACKET statements . R_C_BRACKET

    R_C_BRACKET  shift, and go to state 130


State 129

   32 elif: ELIF bool_exp L_C_BRACKET statements R_C_BRACKET .

    $default  reduce using rule 32 (elif)


State 130

   35 for: FOR num SEMICOLON bool_exp ID ASSIGN exp L_C_BRACKET statements R_C_BRACKET .

    $default  reduce using rule 35 (for)
