Terminals unused in grammar

   COMMENT
   L_BRACKET
   R_BRACKET


State 38 conflicts: 1 reduce/reduce
State 80 conflicts: 1 reduce/reduce
State 82 conflicts: 1 reduce/reduce


Grammar

    0 $accept: prog_start $end

    1 prog_start: %empty
    2           | functions

    3 functions: function
    4          | function functions

    5 function: FUNC ID L_PAREN args R_PAREN L_C_BRACKET statements R_C_BRACKET SEMICOLON

    6 args: arg COMMA args
    7     | arg

    8 arg: %empty
    9    | NUM ID

   10 statements: statement SEMICOLON
   11           | statement SEMICOLON statements

   12 statement: declaration
   13          | function_call
   14          | num
   15          | if
   16          | while
   17          | for
   18          | input
   19          | output
   20          | return
   21          | ID ASSIGN exp

   22 return: RETURN ID
   23       | RETURN exp

   24 num: NUM ID ASSIGN exp
   25    | NUM ID ASSIGN NUMBER
   26    | NUM ID ASSIGN function_call

   27 if: IF bool_exp L_C_BRACKET statements elsify R_C_BRACKET

   28 elsify: elif SEMICOLON elsify
   29       | else SEMICOLON
   30       | %empty

   31 elif: ELIF bool_exp L_C_BRACKET statements R_C_BRACKET

   32 else: ELSE L_C_BRACKET statements R_C_BRACKET

   33 while: WHILE bool_exp L_C_BRACKET statements R_C_BRACKET

   34 for: FOR num SEMICOLON bool_exp ID ASSIGN exp L_C_BRACKET statements R_C_BRACKET

   35 input: INPUT L_PAREN ID R_PAREN

   36 output: OUTPUT L_PAREN exp R_PAREN

   37 exp: exp PLUS term
   38    | exp MINUS term
   39    | term

   40 bool_exp: L_PAREN exp comp exp R_PAREN

   41 comp: LESS
   42     | GREATER
   43     | EQUAL
   44     | LE_EQ
   45     | GE_EQ
   46     | NOT_EQUAL

   47 term: term MULTI factor
   48     | term DIVISION factor
   49     | factor

   50 factor: L_PAREN exp R_PAREN
   51       | NUMBER
   52       | ID
   53       | function_call

   54 declaration: NUM ID

   55 function_call: ID L_PAREN exp R_PAREN


Terminals, with rules where they appear

$end (0) 0
error (256)
RETURN (258) 22 23
INPUT (259) 35
OUTPUT (260) 36
NUMBER (261) 25 51
NUM (262) 9 24 25 26 54
WHILE (263) 33
IF (264) 27
ELIF (265) 31
ELSE (266) 32
FUNC (267) 5
PLUS (268) 37
MINUS (269) 38
MULTI (270) 47
DIVISION (271) 48
LESS (272) 41
GREATER (273) 42
EQUAL (274) 43
NOT_EQUAL (275) 46
LE_EQ (276) 44
GE_EQ (277) 45
COMMENT (278)
L_BRACKET (279)
R_BRACKET (280)
L_C_BRACKET (281) 5 27 31 32 33 34
R_C_BRACKET (282) 5 27 31 32 33 34
L_PAREN (283) 5 35 36 40 50 55
R_PAREN (284) 5 35 36 40 50 55
ASSIGN (285) 21 24 25 26 34
SEMICOLON (286) 5 10 11 28 29 34
COMMA (287) 6
FOR (288) 34
ID (289) 5 9 21 22 24 25 26 34 35 52 54 55


Nonterminals, with rules where they appear

$accept (35)
    on left: 0
prog_start (36)
    on left: 1 2, on right: 0
functions (37)
    on left: 3 4, on right: 2 4
function (38)
    on left: 5, on right: 3 4
args (39)
    on left: 6 7, on right: 5 6
arg (40)
    on left: 8 9, on right: 6 7
statements (41)
    on left: 10 11, on right: 5 11 27 31 32 33 34
statement (42)
    on left: 12 13 14 15 16 17 18 19 20 21, on right: 10 11
return (43)
    on left: 22 23, on right: 20
num (44)
    on left: 24 25 26, on right: 14 34
if (45)
    on left: 27, on right: 15
elsify (46)
    on left: 28 29 30, on right: 27 28
elif (47)
    on left: 31, on right: 28
else (48)
    on left: 32, on right: 29
while (49)
    on left: 33, on right: 16
for (50)
    on left: 34, on right: 17
input (51)
    on left: 35, on right: 18
output (52)
    on left: 36, on right: 19
exp (53)
    on left: 37 38 39, on right: 21 23 24 34 36 37 38 40 50 55
bool_exp (54)
    on left: 40, on right: 27 31 33 34
comp (55)
    on left: 41 42 43 44 45 46, on right: 40
term (56)
    on left: 47 48 49, on right: 37 38 39 47 48
factor (57)
    on left: 50 51 52 53, on right: 47 48 49
declaration (58)
    on left: 54, on right: 12
function_call (59)
    on left: 55, on right: 13 26 53


State 0

    0 $accept: . prog_start $end

    FUNC  shift, and go to state 1

    $default  reduce using rule 1 (prog_start)

    prog_start  go to state 2
    functions   go to state 3
    function    go to state 4


State 1

    5 function: FUNC . ID L_PAREN args R_PAREN L_C_BRACKET statements R_C_BRACKET SEMICOLON

    ID  shift, and go to state 5


State 2

    0 $accept: prog_start . $end

    $end  shift, and go to state 6


State 3

    2 prog_start: functions .

    $default  reduce using rule 2 (prog_start)


State 4

    3 functions: function .
    4          | function . functions

    FUNC  shift, and go to state 1

    $default  reduce using rule 3 (functions)

    functions  go to state 7
    function   go to state 4


State 5

    5 function: FUNC ID . L_PAREN args R_PAREN L_C_BRACKET statements R_C_BRACKET SEMICOLON

    L_PAREN  shift, and go to state 8


State 6

    0 $accept: prog_start $end .

    $default  accept


State 7

    4 functions: function functions .

    $default  reduce using rule 4 (functions)


State 8

    5 function: FUNC ID L_PAREN . args R_PAREN L_C_BRACKET statements R_C_BRACKET SEMICOLON

    NUM  shift, and go to state 9

    $default  reduce using rule 8 (arg)

    args  go to state 10
    arg   go to state 11


State 9

    9 arg: NUM . ID

    ID  shift, and go to state 12


State 10

    5 function: FUNC ID L_PAREN args . R_PAREN L_C_BRACKET statements R_C_BRACKET SEMICOLON

    R_PAREN  shift, and go to state 13


State 11

    6 args: arg . COMMA args
    7     | arg .

    COMMA  shift, and go to state 14

    $default  reduce using rule 7 (args)


State 12

    9 arg: NUM ID .

    $default  reduce using rule 9 (arg)


State 13

    5 function: FUNC ID L_PAREN args R_PAREN . L_C_BRACKET statements R_C_BRACKET SEMICOLON

    L_C_BRACKET  shift, and go to state 15


State 14

    6 args: arg COMMA . args

    NUM  shift, and go to state 9

    $default  reduce using rule 8 (arg)

    args  go to state 16
    arg   go to state 11


State 15

    5 function: FUNC ID L_PAREN args R_PAREN L_C_BRACKET . statements R_C_BRACKET SEMICOLON

    RETURN  shift, and go to state 17
    INPUT   shift, and go to state 18
    OUTPUT  shift, and go to state 19
    NUM     shift, and go to state 20
    WHILE   shift, and go to state 21
    IF      shift, and go to state 22
    FOR     shift, and go to state 23
    ID      shift, and go to state 24

    statements     go to state 25
    statement      go to state 26
    return         go to state 27
    num            go to state 28
    if             go to state 29
    while          go to state 30
    for            go to state 31
    input          go to state 32
    output         go to state 33
    declaration    go to state 34
    function_call  go to state 35


State 16

    6 args: arg COMMA args .

    $default  reduce using rule 6 (args)


State 17

   22 return: RETURN . ID
   23       | RETURN . exp

    NUMBER   shift, and go to state 36
    L_PAREN  shift, and go to state 37
    ID       shift, and go to state 38

    exp            go to state 39
    term           go to state 40
    factor         go to state 41
    function_call  go to state 42


State 18

   35 input: INPUT . L_PAREN ID R_PAREN

    L_PAREN  shift, and go to state 43


State 19

   36 output: OUTPUT . L_PAREN exp R_PAREN

    L_PAREN  shift, and go to state 44


State 20

   24 num: NUM . ID ASSIGN exp
   25    | NUM . ID ASSIGN NUMBER
   26    | NUM . ID ASSIGN function_call
   54 declaration: NUM . ID

    ID  shift, and go to state 45


State 21

   33 while: WHILE . bool_exp L_C_BRACKET statements R_C_BRACKET

    L_PAREN  shift, and go to state 46

    bool_exp  go to state 47


State 22

   27 if: IF . bool_exp L_C_BRACKET statements elsify R_C_BRACKET

    L_PAREN  shift, and go to state 46

    bool_exp  go to state 48


State 23

   34 for: FOR . num SEMICOLON bool_exp ID ASSIGN exp L_C_BRACKET statements R_C_BRACKET

    NUM  shift, and go to state 49

    num  go to state 50


State 24

   21 statement: ID . ASSIGN exp
   55 function_call: ID . L_PAREN exp R_PAREN

    L_PAREN  shift, and go to state 51
    ASSIGN   shift, and go to state 52


State 25

    5 function: FUNC ID L_PAREN args R_PAREN L_C_BRACKET statements . R_C_BRACKET SEMICOLON

    R_C_BRACKET  shift, and go to state 53


State 26

   10 statements: statement . SEMICOLON
   11           | statement . SEMICOLON statements

    SEMICOLON  shift, and go to state 54


State 27

   20 statement: return .

    $default  reduce using rule 20 (statement)


State 28

   14 statement: num .

    $default  reduce using rule 14 (statement)


State 29

   15 statement: if .

    $default  reduce using rule 15 (statement)


State 30

   16 statement: while .

    $default  reduce using rule 16 (statement)


State 31

   17 statement: for .

    $default  reduce using rule 17 (statement)


State 32

   18 statement: input .

    $default  reduce using rule 18 (statement)


State 33

   19 statement: output .

    $default  reduce using rule 19 (statement)


State 34

   12 statement: declaration .

    $default  reduce using rule 12 (statement)


State 35

   13 statement: function_call .

    $default  reduce using rule 13 (statement)


State 36

   51 factor: NUMBER .

    $default  reduce using rule 51 (factor)


State 37

   50 factor: L_PAREN . exp R_PAREN

    NUMBER   shift, and go to state 36
    L_PAREN  shift, and go to state 37
    ID       shift, and go to state 55

    exp            go to state 56
    term           go to state 40
    factor         go to state 41
    function_call  go to state 42


State 38

   22 return: RETURN ID .
   52 factor: ID .
   55 function_call: ID . L_PAREN exp R_PAREN

    L_PAREN  shift, and go to state 51

    SEMICOLON  reduce using rule 22 (return)
    SEMICOLON  [reduce using rule 52 (factor)]
    $default   reduce using rule 52 (factor)


State 39

   23 return: RETURN exp .
   37 exp: exp . PLUS term
   38    | exp . MINUS term

    PLUS   shift, and go to state 57
    MINUS  shift, and go to state 58

    $default  reduce using rule 23 (return)


State 40

   39 exp: term .
   47 term: term . MULTI factor
   48     | term . DIVISION factor

    MULTI     shift, and go to state 59
    DIVISION  shift, and go to state 60

    $default  reduce using rule 39 (exp)


State 41

   49 term: factor .

    $default  reduce using rule 49 (term)


State 42

   53 factor: function_call .

    $default  reduce using rule 53 (factor)


State 43

   35 input: INPUT L_PAREN . ID R_PAREN

    ID  shift, and go to state 61


State 44

   36 output: OUTPUT L_PAREN . exp R_PAREN

    NUMBER   shift, and go to state 36
    L_PAREN  shift, and go to state 37
    ID       shift, and go to state 55

    exp            go to state 62
    term           go to state 40
    factor         go to state 41
    function_call  go to state 42


State 45

   24 num: NUM ID . ASSIGN exp
   25    | NUM ID . ASSIGN NUMBER
   26    | NUM ID . ASSIGN function_call
   54 declaration: NUM ID .

    ASSIGN  shift, and go to state 63

    $default  reduce using rule 54 (declaration)


State 46

   40 bool_exp: L_PAREN . exp comp exp R_PAREN

    NUMBER   shift, and go to state 36
    L_PAREN  shift, and go to state 37
    ID       shift, and go to state 55

    exp            go to state 64
    term           go to state 40
    factor         go to state 41
    function_call  go to state 42


State 47

   33 while: WHILE bool_exp . L_C_BRACKET statements R_C_BRACKET

    L_C_BRACKET  shift, and go to state 65


State 48

   27 if: IF bool_exp . L_C_BRACKET statements elsify R_C_BRACKET

    L_C_BRACKET  shift, and go to state 66


State 49

   24 num: NUM . ID ASSIGN exp
   25    | NUM . ID ASSIGN NUMBER
   26    | NUM . ID ASSIGN function_call

    ID  shift, and go to state 67


State 50

   34 for: FOR num . SEMICOLON bool_exp ID ASSIGN exp L_C_BRACKET statements R_C_BRACKET

    SEMICOLON  shift, and go to state 68


State 51

   55 function_call: ID L_PAREN . exp R_PAREN

    NUMBER   shift, and go to state 36
    L_PAREN  shift, and go to state 37
    ID       shift, and go to state 55

    exp            go to state 69
    term           go to state 40
    factor         go to state 41
    function_call  go to state 42


State 52

   21 statement: ID ASSIGN . exp

    NUMBER   shift, and go to state 36
    L_PAREN  shift, and go to state 37
    ID       shift, and go to state 55

    exp            go to state 70
    term           go to state 40
    factor         go to state 41
    function_call  go to state 42


State 53

    5 function: FUNC ID L_PAREN args R_PAREN L_C_BRACKET statements R_C_BRACKET . SEMICOLON

    SEMICOLON  shift, and go to state 71


State 54

   10 statements: statement SEMICOLON .
   11           | statement SEMICOLON . statements

    RETURN  shift, and go to state 17
    INPUT   shift, and go to state 18
    OUTPUT  shift, and go to state 19
    NUM     shift, and go to state 20
    WHILE   shift, and go to state 21
    IF      shift, and go to state 22
    FOR     shift, and go to state 23
    ID      shift, and go to state 24

    $default  reduce using rule 10 (statements)

    statements     go to state 72
    statement      go to state 26
    return         go to state 27
    num            go to state 28
    if             go to state 29
    while          go to state 30
    for            go to state 31
    input          go to state 32
    output         go to state 33
    declaration    go to state 34
    function_call  go to state 35


State 55

   52 factor: ID .
   55 function_call: ID . L_PAREN exp R_PAREN

    L_PAREN  shift, and go to state 51

    $default  reduce using rule 52 (factor)


State 56

   37 exp: exp . PLUS term
   38    | exp . MINUS term
   50 factor: L_PAREN exp . R_PAREN

    PLUS     shift, and go to state 57
    MINUS    shift, and go to state 58
    R_PAREN  shift, and go to state 73


State 57

   37 exp: exp PLUS . term

    NUMBER   shift, and go to state 36
    L_PAREN  shift, and go to state 37
    ID       shift, and go to state 55

    term           go to state 74
    factor         go to state 41
    function_call  go to state 42


State 58

   38 exp: exp MINUS . term

    NUMBER   shift, and go to state 36
    L_PAREN  shift, and go to state 37
    ID       shift, and go to state 55

    term           go to state 75
    factor         go to state 41
    function_call  go to state 42


State 59

   47 term: term MULTI . factor

    NUMBER   shift, and go to state 36
    L_PAREN  shift, and go to state 37
    ID       shift, and go to state 55

    factor         go to state 76
    function_call  go to state 42


State 60

   48 term: term DIVISION . factor

    NUMBER   shift, and go to state 36
    L_PAREN  shift, and go to state 37
    ID       shift, and go to state 55

    factor         go to state 77
    function_call  go to state 42


State 61

   35 input: INPUT L_PAREN ID . R_PAREN

    R_PAREN  shift, and go to state 78


State 62

   36 output: OUTPUT L_PAREN exp . R_PAREN
   37 exp: exp . PLUS term
   38    | exp . MINUS term

    PLUS     shift, and go to state 57
    MINUS    shift, and go to state 58
    R_PAREN  shift, and go to state 79


State 63

   24 num: NUM ID ASSIGN . exp
   25    | NUM ID ASSIGN . NUMBER
   26    | NUM ID ASSIGN . function_call

    NUMBER   shift, and go to state 80
    L_PAREN  shift, and go to state 37
    ID       shift, and go to state 55

    exp            go to state 81
    term           go to state 40
    factor         go to state 41
    function_call  go to state 82


State 64

   37 exp: exp . PLUS term
   38    | exp . MINUS term
   40 bool_exp: L_PAREN exp . comp exp R_PAREN

    PLUS       shift, and go to state 57
    MINUS      shift, and go to state 58
    LESS       shift, and go to state 83
    GREATER    shift, and go to state 84
    EQUAL      shift, and go to state 85
    NOT_EQUAL  shift, and go to state 86
    LE_EQ      shift, and go to state 87
    GE_EQ      shift, and go to state 88

    comp  go to state 89


State 65

   33 while: WHILE bool_exp L_C_BRACKET . statements R_C_BRACKET

    RETURN  shift, and go to state 17
    INPUT   shift, and go to state 18
    OUTPUT  shift, and go to state 19
    NUM     shift, and go to state 20
    WHILE   shift, and go to state 21
    IF      shift, and go to state 22
    FOR     shift, and go to state 23
    ID      shift, and go to state 24

    statements     go to state 90
    statement      go to state 26
    return         go to state 27
    num            go to state 28
    if             go to state 29
    while          go to state 30
    for            go to state 31
    input          go to state 32
    output         go to state 33
    declaration    go to state 34
    function_call  go to state 35


State 66

   27 if: IF bool_exp L_C_BRACKET . statements elsify R_C_BRACKET

    RETURN  shift, and go to state 17
    INPUT   shift, and go to state 18
    OUTPUT  shift, and go to state 19
    NUM     shift, and go to state 20
    WHILE   shift, and go to state 21
    IF      shift, and go to state 22
    FOR     shift, and go to state 23
    ID      shift, and go to state 24

    statements     go to state 91
    statement      go to state 26
    return         go to state 27
    num            go to state 28
    if             go to state 29
    while          go to state 30
    for            go to state 31
    input          go to state 32
    output         go to state 33
    declaration    go to state 34
    function_call  go to state 35


State 67

   24 num: NUM ID . ASSIGN exp
   25    | NUM ID . ASSIGN NUMBER
   26    | NUM ID . ASSIGN function_call

    ASSIGN  shift, and go to state 63


State 68

   34 for: FOR num SEMICOLON . bool_exp ID ASSIGN exp L_C_BRACKET statements R_C_BRACKET

    L_PAREN  shift, and go to state 46

    bool_exp  go to state 92


State 69

   37 exp: exp . PLUS term
   38    | exp . MINUS term
   55 function_call: ID L_PAREN exp . R_PAREN

    PLUS     shift, and go to state 57
    MINUS    shift, and go to state 58
    R_PAREN  shift, and go to state 93


State 70

   21 statement: ID ASSIGN exp .
   37 exp: exp . PLUS term
   38    | exp . MINUS term

    PLUS   shift, and go to state 57
    MINUS  shift, and go to state 58

    $default  reduce using rule 21 (statement)


State 71

    5 function: FUNC ID L_PAREN args R_PAREN L_C_BRACKET statements R_C_BRACKET SEMICOLON .

    $default  reduce using rule 5 (function)


State 72

   11 statements: statement SEMICOLON statements .

    $default  reduce using rule 11 (statements)


State 73

   50 factor: L_PAREN exp R_PAREN .

    $default  reduce using rule 50 (factor)


State 74

   37 exp: exp PLUS term .
   47 term: term . MULTI factor
   48     | term . DIVISION factor

    MULTI     shift, and go to state 59
    DIVISION  shift, and go to state 60

    $default  reduce using rule 37 (exp)


State 75

   38 exp: exp MINUS term .
   47 term: term . MULTI factor
   48     | term . DIVISION factor

    MULTI     shift, and go to state 59
    DIVISION  shift, and go to state 60

    $default  reduce using rule 38 (exp)


State 76

   47 term: term MULTI factor .

    $default  reduce using rule 47 (term)


State 77

   48 term: term DIVISION factor .

    $default  reduce using rule 48 (term)


State 78

   35 input: INPUT L_PAREN ID R_PAREN .

    $default  reduce using rule 35 (input)


State 79

   36 output: OUTPUT L_PAREN exp R_PAREN .

    $default  reduce using rule 36 (output)


State 80

   25 num: NUM ID ASSIGN NUMBER .
   51 factor: NUMBER .

    SEMICOLON  reduce using rule 25 (num)
    SEMICOLON  [reduce using rule 51 (factor)]
    $default   reduce using rule 51 (factor)


State 81

   24 num: NUM ID ASSIGN exp .
   37 exp: exp . PLUS term
   38    | exp . MINUS term

    PLUS   shift, and go to state 57
    MINUS  shift, and go to state 58

    $default  reduce using rule 24 (num)


State 82

   26 num: NUM ID ASSIGN function_call .
   53 factor: function_call .

    SEMICOLON  reduce using rule 26 (num)
    SEMICOLON  [reduce using rule 53 (factor)]
    $default   reduce using rule 53 (factor)


State 83

   41 comp: LESS .

    $default  reduce using rule 41 (comp)


State 84

   42 comp: GREATER .

    $default  reduce using rule 42 (comp)


State 85

   43 comp: EQUAL .

    $default  reduce using rule 43 (comp)


State 86

   46 comp: NOT_EQUAL .

    $default  reduce using rule 46 (comp)


State 87

   44 comp: LE_EQ .

    $default  reduce using rule 44 (comp)


State 88

   45 comp: GE_EQ .

    $default  reduce using rule 45 (comp)


State 89

   40 bool_exp: L_PAREN exp comp . exp R_PAREN

    NUMBER   shift, and go to state 36
    L_PAREN  shift, and go to state 37
    ID       shift, and go to state 55

    exp            go to state 94
    term           go to state 40
    factor         go to state 41
    function_call  go to state 42


State 90

   33 while: WHILE bool_exp L_C_BRACKET statements . R_C_BRACKET

    R_C_BRACKET  shift, and go to state 95


State 91

   27 if: IF bool_exp L_C_BRACKET statements . elsify R_C_BRACKET

    ELIF  shift, and go to state 96
    ELSE  shift, and go to state 97

    $default  reduce using rule 30 (elsify)

    elsify  go to state 98
    elif    go to state 99
    else    go to state 100


State 92

   34 for: FOR num SEMICOLON bool_exp . ID ASSIGN exp L_C_BRACKET statements R_C_BRACKET

    ID  shift, and go to state 101


State 93

   55 function_call: ID L_PAREN exp R_PAREN .

    $default  reduce using rule 55 (function_call)


State 94

   37 exp: exp . PLUS term
   38    | exp . MINUS term
   40 bool_exp: L_PAREN exp comp exp . R_PAREN

    PLUS     shift, and go to state 57
    MINUS    shift, and go to state 58
    R_PAREN  shift, and go to state 102


State 95

   33 while: WHILE bool_exp L_C_BRACKET statements R_C_BRACKET .

    $default  reduce using rule 33 (while)


State 96

   31 elif: ELIF . bool_exp L_C_BRACKET statements R_C_BRACKET

    L_PAREN  shift, and go to state 46

    bool_exp  go to state 103


State 97

   32 else: ELSE . L_C_BRACKET statements R_C_BRACKET

    L_C_BRACKET  shift, and go to state 104


State 98

   27 if: IF bool_exp L_C_BRACKET statements elsify . R_C_BRACKET

    R_C_BRACKET  shift, and go to state 105


State 99

   28 elsify: elif . SEMICOLON elsify

    SEMICOLON  shift, and go to state 106


State 100

   29 elsify: else . SEMICOLON

    SEMICOLON  shift, and go to state 107


State 101

   34 for: FOR num SEMICOLON bool_exp ID . ASSIGN exp L_C_BRACKET statements R_C_BRACKET

    ASSIGN  shift, and go to state 108


State 102

   40 bool_exp: L_PAREN exp comp exp R_PAREN .

    $default  reduce using rule 40 (bool_exp)


State 103

   31 elif: ELIF bool_exp . L_C_BRACKET statements R_C_BRACKET

    L_C_BRACKET  shift, and go to state 109


State 104

   32 else: ELSE L_C_BRACKET . statements R_C_BRACKET

    RETURN  shift, and go to state 17
    INPUT   shift, and go to state 18
    OUTPUT  shift, and go to state 19
    NUM     shift, and go to state 20
    WHILE   shift, and go to state 21
    IF      shift, and go to state 22
    FOR     shift, and go to state 23
    ID      shift, and go to state 24

    statements     go to state 110
    statement      go to state 26
    return         go to state 27
    num            go to state 28
    if             go to state 29
    while          go to state 30
    for            go to state 31
    input          go to state 32
    output         go to state 33
    declaration    go to state 34
    function_call  go to state 35


State 105

   27 if: IF bool_exp L_C_BRACKET statements elsify R_C_BRACKET .

    $default  reduce using rule 27 (if)


State 106

   28 elsify: elif SEMICOLON . elsify

    ELIF  shift, and go to state 96
    ELSE  shift, and go to state 97

    $default  reduce using rule 30 (elsify)

    elsify  go to state 111
    elif    go to state 99
    else    go to state 100


State 107

   29 elsify: else SEMICOLON .

    $default  reduce using rule 29 (elsify)


State 108

   34 for: FOR num SEMICOLON bool_exp ID ASSIGN . exp L_C_BRACKET statements R_C_BRACKET

    NUMBER   shift, and go to state 36
    L_PAREN  shift, and go to state 37
    ID       shift, and go to state 55

    exp            go to state 112
    term           go to state 40
    factor         go to state 41
    function_call  go to state 42


State 109

   31 elif: ELIF bool_exp L_C_BRACKET . statements R_C_BRACKET

    RETURN  shift, and go to state 17
    INPUT   shift, and go to state 18
    OUTPUT  shift, and go to state 19
    NUM     shift, and go to state 20
    WHILE   shift, and go to state 21
    IF      shift, and go to state 22
    FOR     shift, and go to state 23
    ID      shift, and go to state 24

    statements     go to state 113
    statement      go to state 26
    return         go to state 27
    num            go to state 28
    if             go to state 29
    while          go to state 30
    for            go to state 31
    input          go to state 32
    output         go to state 33
    declaration    go to state 34
    function_call  go to state 35


State 110

   32 else: ELSE L_C_BRACKET statements . R_C_BRACKET

    R_C_BRACKET  shift, and go to state 114


State 111

   28 elsify: elif SEMICOLON elsify .

    $default  reduce using rule 28 (elsify)


State 112

   34 for: FOR num SEMICOLON bool_exp ID ASSIGN exp . L_C_BRACKET statements R_C_BRACKET
   37 exp: exp . PLUS term
   38    | exp . MINUS term

    PLUS         shift, and go to state 57
    MINUS        shift, and go to state 58
    L_C_BRACKET  shift, and go to state 115


State 113

   31 elif: ELIF bool_exp L_C_BRACKET statements . R_C_BRACKET

    R_C_BRACKET  shift, and go to state 116


State 114

   32 else: ELSE L_C_BRACKET statements R_C_BRACKET .

    $default  reduce using rule 32 (else)


State 115

   34 for: FOR num SEMICOLON bool_exp ID ASSIGN exp L_C_BRACKET . statements R_C_BRACKET

    RETURN  shift, and go to state 17
    INPUT   shift, and go to state 18
    OUTPUT  shift, and go to state 19
    NUM     shift, and go to state 20
    WHILE   shift, and go to state 21
    IF      shift, and go to state 22
    FOR     shift, and go to state 23
    ID      shift, and go to state 24

    statements     go to state 117
    statement      go to state 26
    return         go to state 27
    num            go to state 28
    if             go to state 29
    while          go to state 30
    for            go to state 31
    input          go to state 32
    output         go to state 33
    declaration    go to state 34
    function_call  go to state 35


State 116

   31 elif: ELIF bool_exp L_C_BRACKET statements R_C_BRACKET .

    $default  reduce using rule 31 (elif)


State 117

   34 for: FOR num SEMICOLON bool_exp ID ASSIGN exp L_C_BRACKET statements . R_C_BRACKET

    R_C_BRACKET  shift, and go to state 118


State 118

   34 for: FOR num SEMICOLON bool_exp ID ASSIGN exp L_C_BRACKET statements R_C_BRACKET .

    $default  reduce using rule 34 (for)
