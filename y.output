Terminals unused in grammar

   RETURN
   ELIF
   ELSE
   LESS
   GREATER
   EQUAL
   NOT_EQUAL
   LE_EQ
   GE_EQ
   COMMENT
   L_BRACKET
   R_BRACKET


Rules useless in parser due to conflicts

   43 args: %empty


State 8 conflicts: 1 reduce/reduce
State 14 conflicts: 1 reduce/reduce
State 40 conflicts: 1 reduce/reduce
State 60 conflicts: 4 reduce/reduce


Grammar

    0 $accept: prog_start $end

    1 prog_start: %empty
    2           | functions

    3 functions: function
    4          | function functions

    5 function: FUNC ID L_PAREN args R_PAREN L_C_BRACKET statements R_C_BRACKET SEMICOLON

    6 args: arg COMMA args
    7     | arg

    8 arg: %empty
    9    | NUM ID

   10 statements: statement SEMICOLON
   11           | statement SEMICOLON statements

   12 statement: declaration
   13          | function_call
   14          | num
   15          | if
   16          | while
   17          | for
   18          | input
   19          | output

   20 num: NUM ID ASSIGN exp
   21    | NUM ID ASSIGN NUMBER
   22    | NUM ID ASSIGN function_call

   23 if: IF bool_exp L_C_BRACKET statements R_C_BRACKET

   24 while: WHILE bool_exp L_C_BRACKET statements R_C_BRACKET

   25 for: FOR num ASSIGN NUMBER SEMICOLON bool_exp SEMICOLON num ASSIGN exp L_C_BRACKET statements R_C_BRACKET

   26 input: INPUT L_PAREN num_list R_PAREN

   27 output: OUTPUT L_PAREN num_list R_PAREN

   28 num_list: %empty
   29         | COMMA num num_list

   30 exp: exp add_op term
   31    | term

   32 bool_exp: L_PAREN ID R_PAREN

   33 add_op: PLUS
   34       | MINUS

   35 term: term mulop factor
   36     | factor

   37 mulop: MULTI
   38      | DIVISION

   39 factor: L_PAREN exp R_PAREN
   40       | NUMBER

   41 declaration: NUM ID

   42 function_call: ID L_PAREN args R_PAREN

   43 args: %empty


Terminals, with rules where they appear

$end (0) 0
error (256)
RETURN (258)
INPUT (259) 26
OUTPUT (260) 27
NUMBER (261) 21 25 40
NUM (262) 9 20 21 22 41
WHILE (263) 24
IF (264) 23
ELIF (265)
ELSE (266)
FUNC (267) 5
ID (268) 5 9 20 21 22 32 41 42
PLUS (269) 33
MINUS (270) 34
MULTI (271) 37
DIVISION (272) 38
LESS (273)
GREATER (274)
EQUAL (275)
NOT_EQUAL (276)
LE_EQ (277)
GE_EQ (278)
COMMENT (279)
L_BRACKET (280)
R_BRACKET (281)
L_C_BRACKET (282) 5 23 24 25
R_C_BRACKET (283) 5 23 24 25
L_PAREN (284) 5 26 27 32 39 42
R_PAREN (285) 5 26 27 32 39 42
ASSIGN (286) 20 21 22 25
SEMICOLON (287) 5 10 11 25
COMMA (288) 6 29
FOR (289) 25


Nonterminals, with rules where they appear

$accept (35)
    on left: 0
prog_start (36)
    on left: 1 2, on right: 0
functions (37)
    on left: 3 4, on right: 2 4
function (38)
    on left: 5, on right: 3 4
args (39)
    on left: 6 7 43, on right: 5 6 42
arg (40)
    on left: 8 9, on right: 6 7
statements (41)
    on left: 10 11, on right: 5 11 23 24 25
statement (42)
    on left: 12 13 14 15 16 17 18 19, on right: 10 11
num (43)
    on left: 20 21 22, on right: 14 25 29
if (44)
    on left: 23, on right: 15
while (45)
    on left: 24, on right: 16
for (46)
    on left: 25, on right: 17
input (47)
    on left: 26, on right: 18
output (48)
    on left: 27, on right: 19
num_list (49)
    on left: 28 29, on right: 26 27 29
exp (50)
    on left: 30 31, on right: 20 25 30 39
bool_exp (51)
    on left: 32, on right: 23 24 25
add_op (52)
    on left: 33 34, on right: 30
term (53)
    on left: 35 36, on right: 30 31 35
mulop (54)
    on left: 37 38, on right: 35
factor (55)
    on left: 39 40, on right: 35 36
declaration (56)
    on left: 41, on right: 12
function_call (57)
    on left: 42, on right: 13 22


State 0

    0 $accept: . prog_start $end

    FUNC  shift, and go to state 1

    $default  reduce using rule 1 (prog_start)

    prog_start  go to state 2
    functions   go to state 3
    function    go to state 4


State 1

    5 function: FUNC . ID L_PAREN args R_PAREN L_C_BRACKET statements R_C_BRACKET SEMICOLON

    ID  shift, and go to state 5


State 2

    0 $accept: prog_start . $end

    $end  shift, and go to state 6


State 3

    2 prog_start: functions .

    $default  reduce using rule 2 (prog_start)


State 4

    3 functions: function .
    4          | function . functions

    FUNC  shift, and go to state 1

    $default  reduce using rule 3 (functions)

    functions  go to state 7
    function   go to state 4


State 5

    5 function: FUNC ID . L_PAREN args R_PAREN L_C_BRACKET statements R_C_BRACKET SEMICOLON

    L_PAREN  shift, and go to state 8


State 6

    0 $accept: prog_start $end .

    $default  accept


State 7

    4 functions: function functions .

    $default  reduce using rule 4 (functions)


State 8

    5 function: FUNC ID L_PAREN . args R_PAREN L_C_BRACKET statements R_C_BRACKET SEMICOLON

    NUM  shift, and go to state 9

    R_PAREN   reduce using rule 8 (arg)
    R_PAREN   [reduce using rule 43 (args)]
    $default  reduce using rule 8 (arg)

    args  go to state 10
    arg   go to state 11


State 9

    9 arg: NUM . ID

    ID  shift, and go to state 12


State 10

    5 function: FUNC ID L_PAREN args . R_PAREN L_C_BRACKET statements R_C_BRACKET SEMICOLON

    R_PAREN  shift, and go to state 13


State 11

    6 args: arg . COMMA args
    7     | arg .

    COMMA  shift, and go to state 14

    $default  reduce using rule 7 (args)


State 12

    9 arg: NUM ID .

    $default  reduce using rule 9 (arg)


State 13

    5 function: FUNC ID L_PAREN args R_PAREN . L_C_BRACKET statements R_C_BRACKET SEMICOLON

    L_C_BRACKET  shift, and go to state 15


State 14

    6 args: arg COMMA . args

    NUM  shift, and go to state 9

    R_PAREN   reduce using rule 8 (arg)
    R_PAREN   [reduce using rule 43 (args)]
    $default  reduce using rule 8 (arg)

    args  go to state 16
    arg   go to state 11


State 15

    5 function: FUNC ID L_PAREN args R_PAREN L_C_BRACKET . statements R_C_BRACKET SEMICOLON

    INPUT   shift, and go to state 17
    OUTPUT  shift, and go to state 18
    NUM     shift, and go to state 19
    WHILE   shift, and go to state 20
    IF      shift, and go to state 21
    ID      shift, and go to state 22
    FOR     shift, and go to state 23

    statements     go to state 24
    statement      go to state 25
    num            go to state 26
    if             go to state 27
    while          go to state 28
    for            go to state 29
    input          go to state 30
    output         go to state 31
    declaration    go to state 32
    function_call  go to state 33


State 16

    6 args: arg COMMA args .

    $default  reduce using rule 6 (args)


State 17

   26 input: INPUT . L_PAREN num_list R_PAREN

    L_PAREN  shift, and go to state 34


State 18

   27 output: OUTPUT . L_PAREN num_list R_PAREN

    L_PAREN  shift, and go to state 35


State 19

   20 num: NUM . ID ASSIGN exp
   21    | NUM . ID ASSIGN NUMBER
   22    | NUM . ID ASSIGN function_call
   41 declaration: NUM . ID

    ID  shift, and go to state 36


State 20

   24 while: WHILE . bool_exp L_C_BRACKET statements R_C_BRACKET

    L_PAREN  shift, and go to state 37

    bool_exp  go to state 38


State 21

   23 if: IF . bool_exp L_C_BRACKET statements R_C_BRACKET

    L_PAREN  shift, and go to state 37

    bool_exp  go to state 39


State 22

   42 function_call: ID . L_PAREN args R_PAREN

    L_PAREN  shift, and go to state 40


State 23

   25 for: FOR . num ASSIGN NUMBER SEMICOLON bool_exp SEMICOLON num ASSIGN exp L_C_BRACKET statements R_C_BRACKET

    NUM  shift, and go to state 41

    num  go to state 42


State 24

    5 function: FUNC ID L_PAREN args R_PAREN L_C_BRACKET statements . R_C_BRACKET SEMICOLON

    R_C_BRACKET  shift, and go to state 43


State 25

   10 statements: statement . SEMICOLON
   11           | statement . SEMICOLON statements

    SEMICOLON  shift, and go to state 44


State 26

   14 statement: num .

    $default  reduce using rule 14 (statement)


State 27

   15 statement: if .

    $default  reduce using rule 15 (statement)


State 28

   16 statement: while .

    $default  reduce using rule 16 (statement)


State 29

   17 statement: for .

    $default  reduce using rule 17 (statement)


State 30

   18 statement: input .

    $default  reduce using rule 18 (statement)


State 31

   19 statement: output .

    $default  reduce using rule 19 (statement)


State 32

   12 statement: declaration .

    $default  reduce using rule 12 (statement)


State 33

   13 statement: function_call .

    $default  reduce using rule 13 (statement)


State 34

   26 input: INPUT L_PAREN . num_list R_PAREN

    COMMA  shift, and go to state 45

    $default  reduce using rule 28 (num_list)

    num_list  go to state 46


State 35

   27 output: OUTPUT L_PAREN . num_list R_PAREN

    COMMA  shift, and go to state 45

    $default  reduce using rule 28 (num_list)

    num_list  go to state 47


State 36

   20 num: NUM ID . ASSIGN exp
   21    | NUM ID . ASSIGN NUMBER
   22    | NUM ID . ASSIGN function_call
   41 declaration: NUM ID .

    ASSIGN  shift, and go to state 48

    $default  reduce using rule 41 (declaration)


State 37

   32 bool_exp: L_PAREN . ID R_PAREN

    ID  shift, and go to state 49


State 38

   24 while: WHILE bool_exp . L_C_BRACKET statements R_C_BRACKET

    L_C_BRACKET  shift, and go to state 50


State 39

   23 if: IF bool_exp . L_C_BRACKET statements R_C_BRACKET

    L_C_BRACKET  shift, and go to state 51


State 40

   42 function_call: ID L_PAREN . args R_PAREN

    NUM  shift, and go to state 9

    R_PAREN   reduce using rule 8 (arg)
    R_PAREN   [reduce using rule 43 (args)]
    $default  reduce using rule 8 (arg)

    args  go to state 52
    arg   go to state 11


State 41

   20 num: NUM . ID ASSIGN exp
   21    | NUM . ID ASSIGN NUMBER
   22    | NUM . ID ASSIGN function_call

    ID  shift, and go to state 53


State 42

   25 for: FOR num . ASSIGN NUMBER SEMICOLON bool_exp SEMICOLON num ASSIGN exp L_C_BRACKET statements R_C_BRACKET

    ASSIGN  shift, and go to state 54


State 43

    5 function: FUNC ID L_PAREN args R_PAREN L_C_BRACKET statements R_C_BRACKET . SEMICOLON

    SEMICOLON  shift, and go to state 55


State 44

   10 statements: statement SEMICOLON .
   11           | statement SEMICOLON . statements

    INPUT   shift, and go to state 17
    OUTPUT  shift, and go to state 18
    NUM     shift, and go to state 19
    WHILE   shift, and go to state 20
    IF      shift, and go to state 21
    ID      shift, and go to state 22
    FOR     shift, and go to state 23

    $default  reduce using rule 10 (statements)

    statements     go to state 56
    statement      go to state 25
    num            go to state 26
    if             go to state 27
    while          go to state 28
    for            go to state 29
    input          go to state 30
    output         go to state 31
    declaration    go to state 32
    function_call  go to state 33


State 45

   29 num_list: COMMA . num num_list

    NUM  shift, and go to state 41

    num  go to state 57


State 46

   26 input: INPUT L_PAREN num_list . R_PAREN

    R_PAREN  shift, and go to state 58


State 47

   27 output: OUTPUT L_PAREN num_list . R_PAREN

    R_PAREN  shift, and go to state 59


State 48

   20 num: NUM ID ASSIGN . exp
   21    | NUM ID ASSIGN . NUMBER
   22    | NUM ID ASSIGN . function_call

    NUMBER   shift, and go to state 60
    ID       shift, and go to state 22
    L_PAREN  shift, and go to state 61

    exp            go to state 62
    term           go to state 63
    factor         go to state 64
    function_call  go to state 65


State 49

   32 bool_exp: L_PAREN ID . R_PAREN

    R_PAREN  shift, and go to state 66


State 50

   24 while: WHILE bool_exp L_C_BRACKET . statements R_C_BRACKET

    INPUT   shift, and go to state 17
    OUTPUT  shift, and go to state 18
    NUM     shift, and go to state 19
    WHILE   shift, and go to state 20
    IF      shift, and go to state 21
    ID      shift, and go to state 22
    FOR     shift, and go to state 23

    statements     go to state 67
    statement      go to state 25
    num            go to state 26
    if             go to state 27
    while          go to state 28
    for            go to state 29
    input          go to state 30
    output         go to state 31
    declaration    go to state 32
    function_call  go to state 33


State 51

   23 if: IF bool_exp L_C_BRACKET . statements R_C_BRACKET

    INPUT   shift, and go to state 17
    OUTPUT  shift, and go to state 18
    NUM     shift, and go to state 19
    WHILE   shift, and go to state 20
    IF      shift, and go to state 21
    ID      shift, and go to state 22
    FOR     shift, and go to state 23

    statements     go to state 68
    statement      go to state 25
    num            go to state 26
    if             go to state 27
    while          go to state 28
    for            go to state 29
    input          go to state 30
    output         go to state 31
    declaration    go to state 32
    function_call  go to state 33


State 52

   42 function_call: ID L_PAREN args . R_PAREN

    R_PAREN  shift, and go to state 69


State 53

   20 num: NUM ID . ASSIGN exp
   21    | NUM ID . ASSIGN NUMBER
   22    | NUM ID . ASSIGN function_call

    ASSIGN  shift, and go to state 48


State 54

   25 for: FOR num ASSIGN . NUMBER SEMICOLON bool_exp SEMICOLON num ASSIGN exp L_C_BRACKET statements R_C_BRACKET

    NUMBER  shift, and go to state 70


State 55

    5 function: FUNC ID L_PAREN args R_PAREN L_C_BRACKET statements R_C_BRACKET SEMICOLON .

    $default  reduce using rule 5 (function)


State 56

   11 statements: statement SEMICOLON statements .

    $default  reduce using rule 11 (statements)


State 57

   29 num_list: COMMA num . num_list

    COMMA  shift, and go to state 45

    $default  reduce using rule 28 (num_list)

    num_list  go to state 71


State 58

   26 input: INPUT L_PAREN num_list R_PAREN .

    $default  reduce using rule 26 (input)


State 59

   27 output: OUTPUT L_PAREN num_list R_PAREN .

    $default  reduce using rule 27 (output)


State 60

   21 num: NUM ID ASSIGN NUMBER .
   40 factor: NUMBER .

    PLUS       reduce using rule 40 (factor)
    MINUS      reduce using rule 40 (factor)
    MULTI      reduce using rule 40 (factor)
    DIVISION   reduce using rule 40 (factor)
    R_PAREN    reduce using rule 21 (num)
    R_PAREN    [reduce using rule 40 (factor)]
    ASSIGN     reduce using rule 21 (num)
    ASSIGN     [reduce using rule 40 (factor)]
    SEMICOLON  reduce using rule 21 (num)
    SEMICOLON  [reduce using rule 40 (factor)]
    COMMA      reduce using rule 21 (num)
    COMMA      [reduce using rule 40 (factor)]
    $default   reduce using rule 21 (num)


State 61

   39 factor: L_PAREN . exp R_PAREN

    NUMBER   shift, and go to state 72
    L_PAREN  shift, and go to state 61

    exp     go to state 73
    term    go to state 63
    factor  go to state 64


State 62

   20 num: NUM ID ASSIGN exp .
   30 exp: exp . add_op term

    PLUS   shift, and go to state 74
    MINUS  shift, and go to state 75

    $default  reduce using rule 20 (num)

    add_op  go to state 76


State 63

   31 exp: term .
   35 term: term . mulop factor

    MULTI     shift, and go to state 77
    DIVISION  shift, and go to state 78

    $default  reduce using rule 31 (exp)

    mulop  go to state 79


State 64

   36 term: factor .

    $default  reduce using rule 36 (term)


State 65

   22 num: NUM ID ASSIGN function_call .

    $default  reduce using rule 22 (num)


State 66

   32 bool_exp: L_PAREN ID R_PAREN .

    $default  reduce using rule 32 (bool_exp)


State 67

   24 while: WHILE bool_exp L_C_BRACKET statements . R_C_BRACKET

    R_C_BRACKET  shift, and go to state 80


State 68

   23 if: IF bool_exp L_C_BRACKET statements . R_C_BRACKET

    R_C_BRACKET  shift, and go to state 81


State 69

   42 function_call: ID L_PAREN args R_PAREN .

    $default  reduce using rule 42 (function_call)


State 70

   25 for: FOR num ASSIGN NUMBER . SEMICOLON bool_exp SEMICOLON num ASSIGN exp L_C_BRACKET statements R_C_BRACKET

    SEMICOLON  shift, and go to state 82


State 71

   29 num_list: COMMA num num_list .

    $default  reduce using rule 29 (num_list)


State 72

   40 factor: NUMBER .

    $default  reduce using rule 40 (factor)


State 73

   30 exp: exp . add_op term
   39 factor: L_PAREN exp . R_PAREN

    PLUS     shift, and go to state 74
    MINUS    shift, and go to state 75
    R_PAREN  shift, and go to state 83

    add_op  go to state 76


State 74

   33 add_op: PLUS .

    $default  reduce using rule 33 (add_op)


State 75

   34 add_op: MINUS .

    $default  reduce using rule 34 (add_op)


State 76

   30 exp: exp add_op . term

    NUMBER   shift, and go to state 72
    L_PAREN  shift, and go to state 61

    term    go to state 84
    factor  go to state 64


State 77

   37 mulop: MULTI .

    $default  reduce using rule 37 (mulop)


State 78

   38 mulop: DIVISION .

    $default  reduce using rule 38 (mulop)


State 79

   35 term: term mulop . factor

    NUMBER   shift, and go to state 72
    L_PAREN  shift, and go to state 61

    factor  go to state 85


State 80

   24 while: WHILE bool_exp L_C_BRACKET statements R_C_BRACKET .

    $default  reduce using rule 24 (while)


State 81

   23 if: IF bool_exp L_C_BRACKET statements R_C_BRACKET .

    $default  reduce using rule 23 (if)


State 82

   25 for: FOR num ASSIGN NUMBER SEMICOLON . bool_exp SEMICOLON num ASSIGN exp L_C_BRACKET statements R_C_BRACKET

    L_PAREN  shift, and go to state 37

    bool_exp  go to state 86


State 83

   39 factor: L_PAREN exp R_PAREN .

    $default  reduce using rule 39 (factor)


State 84

   30 exp: exp add_op term .
   35 term: term . mulop factor

    MULTI     shift, and go to state 77
    DIVISION  shift, and go to state 78

    $default  reduce using rule 30 (exp)

    mulop  go to state 79


State 85

   35 term: term mulop factor .

    $default  reduce using rule 35 (term)


State 86

   25 for: FOR num ASSIGN NUMBER SEMICOLON bool_exp . SEMICOLON num ASSIGN exp L_C_BRACKET statements R_C_BRACKET

    SEMICOLON  shift, and go to state 87


State 87

   25 for: FOR num ASSIGN NUMBER SEMICOLON bool_exp SEMICOLON . num ASSIGN exp L_C_BRACKET statements R_C_BRACKET

    NUM  shift, and go to state 41

    num  go to state 88


State 88

   25 for: FOR num ASSIGN NUMBER SEMICOLON bool_exp SEMICOLON num . ASSIGN exp L_C_BRACKET statements R_C_BRACKET

    ASSIGN  shift, and go to state 89


State 89

   25 for: FOR num ASSIGN NUMBER SEMICOLON bool_exp SEMICOLON num ASSIGN . exp L_C_BRACKET statements R_C_BRACKET

    NUMBER   shift, and go to state 72
    L_PAREN  shift, and go to state 61

    exp     go to state 90
    term    go to state 63
    factor  go to state 64


State 90

   25 for: FOR num ASSIGN NUMBER SEMICOLON bool_exp SEMICOLON num ASSIGN exp . L_C_BRACKET statements R_C_BRACKET
   30 exp: exp . add_op term

    PLUS         shift, and go to state 74
    MINUS        shift, and go to state 75
    L_C_BRACKET  shift, and go to state 91

    add_op  go to state 76


State 91

   25 for: FOR num ASSIGN NUMBER SEMICOLON bool_exp SEMICOLON num ASSIGN exp L_C_BRACKET . statements R_C_BRACKET

    INPUT   shift, and go to state 17
    OUTPUT  shift, and go to state 18
    NUM     shift, and go to state 19
    WHILE   shift, and go to state 20
    IF      shift, and go to state 21
    ID      shift, and go to state 22
    FOR     shift, and go to state 23

    statements     go to state 92
    statement      go to state 25
    num            go to state 26
    if             go to state 27
    while          go to state 28
    for            go to state 29
    input          go to state 30
    output         go to state 31
    declaration    go to state 32
    function_call  go to state 33


State 92

   25 for: FOR num ASSIGN NUMBER SEMICOLON bool_exp SEMICOLON num ASSIGN exp L_C_BRACKET statements . R_C_BRACKET

    R_C_BRACKET  shift, and go to state 93


State 93

   25 for: FOR num ASSIGN NUMBER SEMICOLON bool_exp SEMICOLON num ASSIGN exp L_C_BRACKET statements R_C_BRACKET .

    $default  reduce using rule 25 (for)
